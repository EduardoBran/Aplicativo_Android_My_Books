<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/container"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingTop="?attr/actionBarSize">

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/nav_view"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="0dp"
        android:layout_marginEnd="0dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:menu="@menu/bottom_nav_menu" />

    <fragment
        android:id="@+id/nav_host_fragment_activity_main"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:defaultNavHost="true"
        app:layout_constraintBottom_toTopOf="@id/nav_view"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:navGraph="@navigation/mobile_navigation" />

</androidx.constraintlayout.widget.ConstraintLayout>


<!--

-> Elemento RecyclerView criado em fragment_home
-> A lista de livros acontecerá em dois momentos (na home e em favorites)
    - Na home irá ter todos os livros.
    - Em favorite irá ter somente os livros favoritados.

-> 3 Passos necessários para um RecyclerView nascer na HomeFragment

    - 1. criação do Layout (criado em fragment_home)
        1.1 criar mais um arquivo xml (dentro do diretório layout com nome de "item_book.xml")
            que será usado posteriormente na etapa 3.


    - 2. identificação e atribuição no código (HomeFragment) para dizer como a
      RecyclerView irá se comportar (recuperando id com binding)
            - "binding.recyclerviewbooks.layoutManager = LinearLayoutManager(context)"


    - 3. ainda no código (HomeFragment) é necessário um "adapter" que é que irá
      fazer a conexão com a lista de livros (BookRepository) com o layout. Para isso é necessário
      a criação de uma nova classe (criar pacote "adapter" dentro do pacote "ui" e classe com nome de "BookAdapter").

    - Em "BookAdapter" é necessário extender a classe RecyclerView.Adapter que irá precisar de uma classe
      ViewHolder (criar pacote "viewholder" dentro de "ui" e classe com o nome de "BookViewHolder")

    - Em "BookViewHolder" também é necessário extender RecyclerView.ViewHolder que espera receber uma View (layout)
        - Ainda na classe "BookViewHolder" retornar o layout criado ("item_book.xml").

    - Voltando em "BookAdapter" precista retornar o "BookViewHolder" criado anteriormente chamando o
       construtor e implementar os métodos automaticamente.
      - onCreateViewHolder é responsável por criar o elemento de layout
      - getItemCount retorna quantos elementos existem na Recycler View
      - onBindViewHolder é responsável por atribuir/obter os valores dos atributos (livros) para o layout

      - Retornar o adapter em "HomeFragment"
        - fora do "onCreateView" criar "private val adapter: BookAdapter = BookAdapter()
        - dentro de "onCreateView" chamar o binding.recyclerviewBooks.adapter = adapter"


    - Retornar a "BookViewHolder" e criar um mét0do ainda sem implementação para atribuição dos
      elementos (função "bind") que será usado em "onBindViewCount" da classe "BookAdapter".


    - Voltando em "BookAdapter" retornar a lista de livros com uma variável
        - criacao da variável "private var bookList: List<BookEntity> = listOf()"

        - Retonar em getItemCount o tamanho da lista com "return bookList.size"

        - Retornar em onBindViewCount a função "bind" criado em "BookViewHolder"
            "holder.bind(bookList[position])"

        - Retornar em onCreateViewHolder o layout de forma parecida que ja tem em "HomeFragment"
            - criar uma variável view chamando o xml "item_book" com "val view = ItemBookBindind.inflate()"
                "val view = ItemBookBinding.inflate(LayoutInflater.from(parent.context), parent, false)"
            - retornar o "BookViewHolder(view)"
                "return BookViewHolder(view)"


     - Ainda em "BookAdapter" criar uma função "updateBooks(list: List<BookEntity>)" para atualizar os
       livros e assim preencher a variável "bookList".
           - E assim os métodos "onCreateViewHolder", "getItemCount" e "onBindViewHolder" irão funcionar
             pois agora eles tem uma lista preenchida.


     - Ir em "HomeViewModel", modificar "_text" para retornar lista de "BookEntity"
        - Criar função "getAllBooks()" para retornar todos os livros

     - Ir em "HomeFragment" para conseguir atualizar os livros no Layout chamando "getAllBooks()"
        - Solicitar a "homeViewModel" que busque todos os livros
        - Criar função "setObservers()" para sempre que a lista de livros for atualizada,
          atualiza os dados do adapter.


     - Modificar "item_book.xml" para criação de um TextView com id e configurações padrões.
     - Retornar a "BookViewHolder" e implementar o código da função "bind()"
       (responsável por atribuir os valores)



*** Adicionando Página de Detalhes

- Botão direito em layout > New > Fragment > Fragment (with ViewModel)


-->